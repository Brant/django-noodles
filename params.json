{"name":"Django-noodles","tagline":"Half-baked noodles of ideas for little bits of functionality for Django","body":"Django Noodles\r\n==============\r\nNoodles is an app containing all sorts of misc. bits of code that I see to use across projects.\r\n\r\nThere aren't really any connecting dots or common design patterns. It's just stuff I use.\r\n\r\nFirst, add noodles to your installed apps:\r\n```python\r\nINSTALLED_APPS = (\r\n    ...\r\n    'noodles',\r\n)\r\n```\r\n\r\nThe remaining documentation goes through individual noodles. Each is separate from the others - you can pick and choose which things to use.\r\n\r\nAbstract Models\r\n---------------\r\nEach abstract model is essentially named exactly to match the fields it will give you. For example, \"TitleDateSlug\" will give you title, date, and slug fields. \r\n\r\nYour models can just inherit from these models to save yourself some typing.\r\n\r\n### LittleSlugger\r\nLittleSlugger allows you to designate a field on your model to be \"slugified\". It provides some additional calculations to prevent conflicting slugs, so you can query reliably on the slug field.\r\n\r\nIn order to implement, you need to create a method for your model named \"get_slug_target\". It should return the name of the field you want to slugify, as a string.\r\n```python\r\nfrom noodles.models import LittleSlugger\r\n\r\nclass MySluggedModel(LittleSlugger):\r\n    title = models.CharField(max_length=50)\r\n    \r\n    def get_slug_target(self):\r\n        return \"title\"\t    \r\n```\r\nNot adding the \"get_slug_target\" method to your model will raise NotImplementedError.\r\n\r\nLittle Slugger will look for another object of the same model type with a matching slug. If it finds one, it will append a number (in sequence) to the end of the slug.\r\n\r\nFor example, if you had an entry with a title of \"A good day\", it would have a slug of \"a-good-day\". If you then made _another_ entry titled \"A good day\", it would end up with a slug of \"a-good-day-1\". If a third entry with the same title was created, it would become \"a-good-day-2\". This allows reliably querying on slugs, as if they would always be unique.\r\n\r\nAnother default behavior of LittleSlugger is to keep the slug, once it has been established, even if the sluggified field should change. This allows, for example, title changes on blog posts without changing the URL of that post.\r\n\r\nFor example, if you titled a post \"A good days\" and published it, you might have a URL of \"http://myblog.com/a-good-days/\". Realizing it should be titled \"A good day\", you would change the title. However, the slug would stay the same, keeping any pointers to the URL the same as well.\r\n\r\nTo disable this behavior, you simply need to make a small addition to the \"get_slug_target\" method.\r\n```python\r\nfrom noodles.models import LittleSlugger\r\n\r\nclass MySluggedModel(LittleSlugger):\r\n    title = models.CharField(max_length=50)\r\n    \r\n    def get_slug_target(self):\r\n        return (\"title\", False)\t    \r\n```\r\nThe second variable returned in the tuple designates whether or not the slug should \"persist\" through field changes.\r\n\r\n### ActiveToggler\r\nActive Toggler lets you toggle 1 entry of the model to be considered \"active\". Only 1 entry can be active at a time. \r\n\r\nActive Toggler adds an \"active\" attribute to your model. When an object of the model is saved (by calling .save()) and set to active=True, it will run through all other entries for the model and set them all to active=False.\r\n\r\n```python\r\nfrom noodles.models import ActiveToggler\r\n\r\nclass FavoriteIcecream(ActiveToggler):\r\n    \"\"\" You can only have 1 favorite at a time \"\"\"\r\n    name = models.CharField(max_length=50)\r\n```\r\n\r\nYou could then use the model to query as if \"active\" was a unique field.\r\n```python\r\ncurrent_favorite_icecream = FavoriteIcecream.objects.get(active=True)\r\n```\r\n\r\n### NameSlug\r\nNameSlug is a subclass of LittleSlugger, which has a \"name\" attribute. That name attribute is what the slug will be built from.\r\n\r\n### NameSlugActive\r\nNameSlugActive is a subclass of NameSlug (which is a subclass of LittleSlugger). In addition to a name and a slug of that name, there is an \"active\" attribute (BooleanField that defaults to True). \r\n\r\n**Note:** The 'active' attribute is _not_ a toggler (like ActiveToggler's active field).\r\n \r\n### TitleDateSlug\r\nTitleDateSlug is a subclass of LittleSlugger. It's attributes are 'title', 'date', and 'slug'. Slug is derived from the title. \r\n\r\nThe date attribute could be used as something like a publish date. If left blank at save, it will auto populate to 5 days in the future.\r\n\r\nWebsite Metadata\r\n----------------\r\nWebsite metadata consists of key/value pairs that can be used in templates. After a syncdb with noodles installed, this will be available in the admin interface.\r\n\r\nYou'll need to add noodles.context_processors.site_meta to your context processors.\r\n```python\r\nTEMPLATE_CONTEXT_PROCESSORS = (\r\n    ...\r\n    'noodles.context_processors.site_meta',\r\n)\r\n```\r\nFor example, perhaps you don't want to hardcode something like a user's Twitter URL into your templates. Instead, you could assign a key/value pair (through the admin interface) like this:\r\n\r\n\tkey: MY_TWITTER\r\n\tvalue: http://twitter.com/someuser\r\n\r\nThen, in your templates, you can refer to it like this:\r\n```html\r\n<a href=\"{{ SITE_META.MY_TWITTER }}\">Follow me!</a>\r\n```\r\n\r\nContact Submission\r\n------------------\r\nNOODLES_EMAIL_LIST = []\r\n\r\nAssets From Image\r\n-----------------","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}